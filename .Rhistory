pdf(file = "/Users/Rprojects//Figure.pdf")
plot(x, y, xlab = "This is the x-axis", ylab = "this is the y-axis", main = "Plot of X vs Y")
pdf(file = "/Users/Rprojects//Figure.pdf")
plot(x, y, xlab = "This is the x-axis", ylab = "this is the y-axis", main = "Plot of X vs Y")
jpeg(file = "/Users/Rprojects//Figure.pdf")
jpeg(file = "/Users/Rprojects//Figure.jpg")
jpeg(file = "/Users/Rprojects/Figure.jpg")
plot(x, y, col = "green")
jpeg(file = "/Users/Rprojects/Figure.jpg")
plot(x, y, col = "green")
dev.off()
seq(1,2)
seq(1,2,length = 10)
?seq()
seq(3,11)
x = seq(-pi,pi, length=50)
x
?contour()
?outer()
install.packages("ggplot2")
install.packages("maps")
library(ggplot2)
library(maps)
library(RColorBrewer)
head(diamonds)
tail(diamonds)
View(diamonds)
?diamonds
x <- c(1:5)
x
x < 3
1 %in% c(1:4)
1 %in% c(2:4)
c(1:3) %in% c(2:4)
T|T
F|T
F|F
xor(T, T)
xor(T, T)
any(C(T, F, F))
any(c(T, F, F))
all(c(T,T,F))
x
ls()
y <- c(6,7)
y
x %in% y
x %in% c(y,z)
z <- c(1:3)
x %in% c(y,z)
rm(list = ls())  # Clear entire workspace
rm(list = ls())  # Clear entire workspace
rm(list = ls())  # Clear entire workspace
ls()
w <- c(-1, 0, 1)
x <- c(5,15)
y <- "February"
z <- c("Monday", "Tuesday", "Friday")
x %in% c(y,z)
ls()
y == "February"
w > 0
x > 10 & x < 20
x
?week
week <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
week
z %in% week
?mpg
View(mpg)
?qplot
qplot(displ, hwy, data = mpg)
participants_1 <- c(2,3,5,7,11,13,17)
participants_1
participants_2 <- factor(participants_1)
participants_2
?factor
factor_temperature_vector <- factor(temperature_vector, order = T, levels = c("Low","Medium", "High"))
temperature_vector <- c("High", "Low", "High", "Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = T, levels = c("Low","Medium", "High"))
factor_temperature_vector
?hist()
?describe()
?describe
x <c(1,2,3)
describe(x)
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
describe(x)
?append()
append(1:5, 0:1, after = 3)
?hist()
?subset()
?hist()
?par()
?mean()
A <- c(1:3)
B <- c(3,6,7)
A
B
A - mean(A)
diff_A <- A - mean(A)
diff_B <- B - mean(B)
diff_A
diff_B
library("stats4", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?lm
while(i < 4){c(i)}
i <- 1; while(i<3){v<-c(i)}
i<- 1; while(i < 4){v<-c(i) ;i=i+1}
v
v<-c();while(i<4){v<-c(i); i = i+1}
v
v<-c();while(i<4){v<- i; i = i+1}
v
class(v)
v <- c(1:5)
v
v<-c(); while(i<4){v<- c(i); i = i+1}
v
while(i<4){v<- c(i); i = i+1}
v
v<- (numeric=0); while(i <4){v <- c(v,i); i = i+1}
v
i
i <-1; v<-(numeric=0);while(i<4){v<-c(v,i); i = i+1}
v
?c()
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:n.columns){
mat[,column] <- c(1:4)
}
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:4){
mat[,column] <- c(1:4)
}
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:4){
mat[,column] <- c(1:4,2:5,6:10)
}
print(c(1:4))
print(c(1:4,2:5))
mat
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:4){
mat[,column] <- c(1:16)
}
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:4){
mat[,column] <- c(1:12)
}
length(c(1:12))
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:4){
mat[,column] <- c(1:4)
}
mat <- matrix(, nrow=3, ncol=4)
for(column in 1:4){
mat[,column] <- c(1:3)
}
mat
?"matrix"
?norm
?data.frame()
?rep
rep(c(1:3), times=2)
prediction <- rep(NA, 4)
prediction
class(prediction)
prediction <- c(1:3)
prediction
prediction[1]
prediction <- c(2:3)
prediction[1]
?function()
?function()
x
?seq()
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
dim(iris)
ls()
rm(list=ls())
ls()
str(iris)
summary(iris)
?predict
lm_wage <- lm(wage ~ age, data = Wage)
?iris
str(iris)
?wage
?Wage
blood <- c("B", "AB", "O", "A", "O", "O", "A", "B")
blood_factor <- factor(blood)
class(blood_factor)
blood_factor
blood_factor2 <- factor(blood, levels=c("O", "A", "B", "AB"))
levels(blood_factor2)
order(levels(blood_factor2))
order("A","B")
?order
order(c('A','B'))
blood[1]
blood[]
blood_factor<- factor(blood)
blood_factor
?levels
?g1
?gl
gl(2,8, labels=c("Control", "Treat"))
x <- gl(2,4,8)
levels(x)[1] <- "low"
x
levels(x)[2] <- "high"
x
levels(x)
levels(blood_factor)
levels(blood_factor)
f <- factor(c("a", "b"))
f
levels(f) <- c("c", "a", "b")
levels(f)
order(levels(f))
levels(blood_factor)<- c("BT_A", "BT_AB", "BT_B", "BT_O")
blood_factor
levels(blood_factor)
order(levels(blood_factor))
order(c("A","AB", "B", "O"))
factor(blood,
levels = c("O", "A", "B", "AB")
labels = c("BT_O", "BT_A", "BT_B", "BT_AB"))
blood
factor(blood,
levels = c("O", "A", "B", "AB"),
labels = c("BT_O", "BT_A", "BT_B", "BT_AB"))
blood[1]
factor(blood)[1]
blood_factor_new <- factor(blood,
levels = c("O", "A", "B", "AB"),
labels = c("BT_O", "BT_A", "BT_B", "BT_AB"))
blood_factor_new
order(blood_factor_new[1:4])
order(blood_factor_new[1:4])
tshirt <- c("M", "L", "S", "S", "L", "M", "L", "M")
tshirt_factor <- factor(tshirt, ordered=T, levels=c("S", "M", "L"))
t_shirt_factor
tshirt_factor
name <- c("Anne", "Pete", "Frank", "Julia", "Cath")
class(name)
str(name)
age <- c(28, 30, 21, 39, 35)
child <- c(F, T, T, F, T)
df<- data.frame(name, age, child)
df
names(df) <- c("Name", "Age", "Child")
names(df)
name
name[-1]
?data.frame
?factor
countries <- c("Canada", "United States", "France", "Belgium", "India", "China", "United Kingdom", "Russia" )
countries
countries <- c("Canada", "United States", "France", "Belgium", "India", "China", "United Kingdom", "Russia" )
continents <- c("North-America", "North-America", "Europe", "Europe", "Asia","Asia", "Europe", "Asia" )
continents_factor <- factor(continents)
continents_factor
gdp <- c(44843, 54596, 44538, 47787, 1808, 8154, 45653, 8184)
hdi <- c(0.902, 0.914, 0.884, 0.881, 0.586, 0.719, 0.892, 0.778)
president <- c(FALSE, TRUE, TRUE,FALSE,TRUE,TRUE,FALSE,TRUE)
countries_df <- data.frame(countries='name',continents='cont',gdp='GDP',hdi='HDI',president='has_president', stringsAsFactors = F)
str(countries_df)
countries_df <- data.frame(countries='name',continents_factor='cont',gdp='GDP',hdi='HDI',president='has_president', stringsAsFactors = F)
str(countries_df)
continents_factor <- factor(continents)
class(continents_factor)
countries_df <- data.frame(countries='name',continents_factor='cont',gdp='GDP',hdi='HDI',president='has_president', stringsAsFactors = F)
str(countries_df)
countries <- c("Canada", "United States", "France", "Belgium", "India", "China", "United Kingdom", "Russia" )
continents <- c("North-America", "North-America", "Europe", "Europe", "Asia","Asia", "Europe", "Asia" )
continents_factor <- factor(continents)
gdp <- c(44843, 54596, 44538, 47787, 1808, 8154, 45653, 8184)
hdi <- c(0.902, 0.914, 0.884, 0.881, 0.586, 0.719, 0.892, 0.778)
president <- c(FALSE, TRUE, TRUE,FALSE,TRUE,TRUE,FALSE,TRUE)
countries_df <- data.frame(countries='name',continents_factor='cont',gdp='GDP',hdi='HDI',president='has_president', stringsAsFactors = F)
str(countries_df)
data.frame()
countries_df
?data.frame
countries_df <- data.frame(name=countries, cont=continents_factor,GDP=gdp, HDI=hdi,has_president=president, stringsAsFactors = F)
countries_df
str(countries_df)
df
ls()
rm(list = ls())
ls()
name <- c("Anne", "Pete", "Frank", "Julia", "Cath")
age <- c(28, 30, 21, 39, 35)
child <- c(F, T, T, F, T)
people <- data.frame(name, age, child, stringsAsFactors = F)
people
people[3,2]
people[3,'age']
people[3,]
people[,"age"]
people
people[c(3,5), c("age", "child")]
matrix <- (c(1:4), nrow=2, ncol=2)
matrix <- matrix(c(1:4), nrow=2, ncol=2))
matrix <- matrix(1:4, nrow=2, ncol=2)
matrix
matrix[1]
matrix[3]
matrix <- matrix(c(5,6,7,8), nrow=2, ncol=2)
matrix
matrix[3]
people[2]
class(people[2])
people$age
people[["age"]]
people
people[[2]]
people[2]
class(people[2])
class(people[[2]])
sort(people["age"])
sort(people[["age"]])
max(people[["age"]])
index(max(people[["age"]]))
people
people[["name"]]max[["age"]]
people[["name"]][[max("age")]]
people[[max(people[["age"]])]]
people$name[[max(people[["age"]])]]
max(people[["age"]])
height <- c(163, 177, 163, 162, 157)
people$height <- height
people
class(people)
people[["height"]] <- height
people
weight <- c(74, 63, 68, 55, 56)
cbind(people, weight)
people
cbind(people, weight)
people
people
tom <- data.frame(name= "Tom", age=37, child=F, height=183)
tom
class(tom)
rbind(people, Tom)
rbind(people, tom)
people
sort(people$age)
ranks <- order(people$age)
ranks
ranks
people$age
ranks <- order(people$age)
ranks
people$age
people
people[order(people$age, decreasing = T)]
ranks
order(people$age, decreasing = T)
ranks <- order(people$age)
ranks
ranks <- order(people$age)
ranks
people$age
order(people$age, decreasing = T)
people[order(people$age, decreasing=T),]
class(people)
people[order(people$age, decreasing=T),1]
people[order(people$age, decreasing=T),]
people[max(order(people$age, decreasing=T)),]
people[max(order(people$age, decreasing=T)),1]
people[max(order(people$age, decreasing=T)),'name']
?max
z <- c(1:5)
max(z)
max(z,2)
max(z,10)
order(z)
z[max(z)]
?range
range(x)
range(z)
which.max(z)
z <- c(1,5,3,6,4,8)
which.max(z)
?data.frame
30*(4+5+6)
5*(1+2+3)*(4+5+6)
?by
?multcomp
?knn
require(class)
?knn
?index
??index
?sample
setwd("/Users/Rprojects")
setwd("/Users/MachineLearning")
spambase.csv  <- read.csv("~/Users/MachineLearning/spambase/spambase.data", header = TRUE)
spambase.csv  <- read.csv("/Users/MachineLearning/spambase/spambase.data", header = TRUE)
head(spambase.csv)
?read.csv
spambase.csv  <- read.csv("/Users/MachineLearning/spambase/spambase.data", header = F)
head(spambase.csv)
?rep
rep(1:4,2)
x< 1:4
x<- 1:4
rep(NA, length(x))
emails  <- read.csv("/Users/MachineLearning/spambase/spambase.data", header = F)
attach(emails)
head(emails)
length(avg_capital_seq)
colnames(emails)
?colnames()
?colnames
head(emails)
dim(emails)
colnames(emails) <- c("word_freq_make", "word_freq_address", "word_freq_all", "word_freq_3d", "word_freq_our", "word_freq_over", "word_freq_remove", "word_freq_internet", "word_freq_order", "word_freq_mail", "word_freq_receive", "word_freq_will", "word_freq_people", "word_freq_report", "word_freq_addresses", "word_freq_free", "word_freq_business", "word_freq_email", "word_freq_you", "word_freq_credit", "word_freq_your", "word_freq_font", "word_freq_000", "word_freq_money", "word_freq_hp", "word_freq_hpl", "word_freq_george", "word_freq_650", "word_freq_lab", "word_freq_labs", "word_freq_telnet", "word_freq_857", "word_freq_data", "word_freq_415", "word_freq_85", "word_freq_technology", "word_freq_1999", "word_freq_parts", "word_freq_pm", "word_freq_direct", "word_freq_cs", "word_freq_meeting", "word_freq_original", "word_freq_project", "word_freq_re", "word_freq_edu", "word_freq_table", "word_freq_conference", "char_freq_;", "char_freq_(", "char_freq_[", "char_freq_!", "char_freq_$", "char_freq_#", "capital_run_length_average", "capital_run_length_longest", "capital_run_length_total")
head(emails)
emails[1:2]
emails(1:5,2)
emails[1:5,2]
dim(emails)
# Inspect definition of spam_classifier()
spam_classifier <- function(x){
prediction <- rep(NA,length(x)) # initialize v
prediction[x > 4] <- 1
prediction[x >= 3 & x <= 4] <- 0
prediction[x >= 2.2 & x < 3] <- 1
prediction[x >= 1.4 & x < 2.2] <- 0
prediction[x > 1.25 & x < 1.4] <- 1
prediction[x <= 1.25] <- 0
return(prediction)
}
# Apply the classifier to the avg_capital_seq column: spam_pred
attach(emails)
spam_pred <-spam_classifier(avg_capital_seq) # read in each words value for this variable, create a seq of NA's same length as instance of varb, assign value of 0,1 to 'prediction' based on length of variable.
# Compare spam_pred to emails$spam. Use ==
spam_pred == emails$spam
colnames(emails)
spam_pred <-spam_classifier(capital_run_length_average) # read in each words value for this variable, create a seq of NA's same length as instance of varb, assign value of 0,1 to 'prediction' based on length of variable.
spam_pred == emails$spam
colnames(emails) <- c("spam", "word_freq_make", "word_freq_address", "word_freq_all", "word_freq_3d", "word_freq_our", "word_freq_over", "word_freq_remove", "word_freq_internet", "word_freq_order", "word_freq_mail", "word_freq_receive", "word_freq_will", "word_freq_people", "word_freq_report", "word_freq_addresses", "word_freq_free", "word_freq_business", "word_freq_email", "word_freq_you", "word_freq_credit", "word_freq_your", "word_freq_font", "word_freq_000", "word_freq_money", "word_freq_hp", "word_freq_hpl", "word_freq_george", "word_freq_650", "word_freq_lab", "word_freq_labs", "word_freq_telnet", "word_freq_857", "word_freq_data", "word_freq_415", "word_freq_85", "word_freq_technology", "word_freq_1999", "word_freq_parts", "word_freq_pm", "word_freq_direct", "word_freq_cs", "word_freq_meeting", "word_freq_original", "word_freq_project", "word_freq_re", "word_freq_edu", "word_freq_table", "word_freq_conference", "char_freq_;", "char_freq_(", "char_freq_[", "char_freq_!", "char_freq_$", "char_freq_#", "capital_run_length_average", "capital_run_length_longest", "capital_run_length_total")
length(colnames(emails))
dim(emails)
tail(emails)
emails[1,1:3]
emails[2,1:3]
emails[1,55:60]
emails[1,55:58]
emails$spam
emails$spam
colnames(emails) <- c("word_freq_make", "word_freq_address", "word_freq_all", "word_freq_3d", "word_freq_our", "word_freq_over", "word_freq_remove", "word_freq_internet", "word_freq_order", "word_freq_mail", "word_freq_receive", "word_freq_will", "word_freq_people", "word_freq_report", "word_freq_addresses", "word_freq_free", "word_freq_business", "word_freq_email", "word_freq_you", "word_freq_credit", "word_freq_your", "word_freq_font", "word_freq_000", "word_freq_money", "word_freq_hp", "word_freq_hpl", "word_freq_george", "word_freq_650", "word_freq_lab", "word_freq_labs", "word_freq_telnet", "word_freq_857", "word_freq_data", "word_freq_415", "word_freq_85", "word_freq_technology", "word_freq_1999", "word_freq_parts", "word_freq_pm", "word_freq_direct", "word_freq_cs", "word_freq_meeting", "word_freq_original", "word_freq_project", "word_freq_re", "word_freq_edu", "word_freq_table", "word_freq_conference", "char_freq_;", "char_freq_(", "char_freq_[", "char_freq_!", "char_freq_$", "char_freq_#", "capital_run_length_average", "capital_run_length_longest", "capital_run_length_total", "spam",)
colnames(emails) <- c("word_freq_make", "word_freq_address", "word_freq_all", "word_freq_3d", "word_freq_our", "word_freq_over", "word_freq_remove", "word_freq_internet", "word_freq_order", "word_freq_mail", "word_freq_receive", "word_freq_will", "word_freq_people", "word_freq_report", "word_freq_addresses", "word_freq_free", "word_freq_business", "word_freq_email", "word_freq_you", "word_freq_credit", "word_freq_your", "word_freq_font", "word_freq_000", "word_freq_money", "word_freq_hp", "word_freq_hpl", "word_freq_george", "word_freq_650", "word_freq_lab", "word_freq_labs", "word_freq_telnet", "word_freq_857", "word_freq_data", "word_freq_415", "word_freq_85", "word_freq_technology", "word_freq_1999", "word_freq_parts", "word_freq_pm", "word_freq_direct", "word_freq_cs", "word_freq_meeting", "word_freq_original", "word_freq_project", "word_freq_re", "word_freq_edu", "word_freq_table", "word_freq_conference", "char_freq_;", "char_freq_(", "char_freq_[", "char_freq_!", "char_freq_$", "char_freq_#", "capital_run_length_average", "capital_run_length_longest", "capital_run_length_total", "spam")
head(emails)
emails$spam
spam_classifier <- function(x){
prediction <- rep(NA,length(x)) # initialize v
prediction[x > 4] <- 1
prediction[x >= 3 & x <= 4] <- 0
prediction[x >= 2.2 & x < 3] <- 1
prediction[x >= 1.4 & x < 2.2] <- 0
prediction[x > 1.25 & x < 1.4] <- 1
prediction[x <= 1.25] <- 0
return(prediction)
}
attach(emails)
spam_pred <-spam_classifier(capital_run_length_average) # read in each words value for this variable, create a seq of NA's same length as instance of varb, assign value of 0,1 to 'prediction' based on length of variable.
# Compare spam_pred to emails$spam. Use ==
spam_pred == emails$spam
sum(spam_pred == emails$spam)
nrows(emails)
dim(emails)
dim(emails)[1]
sum(spam_pred == emails$spam)/dim(emails)[1]
prediction_rate <- sum(spam_pred == emails$spam)/dim(emails)[1]
?predict
?table
?predict
set.seed(1)
# Take a look at the iris dataset
str(iris)
summary(iris)
# A decision tree model has been built for you
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris, method = "class")
# A dataframe containing unseen observations
unseen <- data.frame(Sepal.Length = c(5.3, 7.2),
Sepal.Width = c(2.9, 3.9),
Petal.Length = c(1.7, 5.4),
Petal.Width = c(0.8, 2.3))
# Predict the label of the unseen observations. Print out the result.
predict(tree, unseen, type='class')
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris, method = "class")
?kmeans
?plot
?lm
?rpfit
?predict
?ncat
??ncat
?match
x <- c(1:2)
match(x, c(1))
?table
setwd("/Users/MachineLearning")
